This is a simple project to make the front page of Database Weekly site more interesting without extra manpower.
The aim is to construct an interesting page with the latest relevant articles, blogs and  so on.
It would  take an OPML file and use it to gather the latest blogs and articles from a number of RSS/Atom sources. Each source will have its’ own settings in the OPML file to control the special treatment of a site, such as search strings, formatting, search interval, method of getting a description, or  selection of favourite authors.
Each source item is searched  regularly for relevant information using a regex. If relevant, it is added to a list.  This list is used to populate a front page for http://www.databaseweekly.com/  and can then be used to supply interesting links selected by the editors for the DBW newsletter.
It should be possible to colour-code articles by source, so SQL Server Central articles might have a blue band at the top, whereas Simple-talk SQL articles might be charcoal. 
The OPML file would be easily editable so that the editors would then be able to fine-tune the selection and display process.

From: Jess Nickson [mailto:Jess.Nickson@red-gate.com] 
Sent: 19 July 2013 14:39
To: Andrew Clarke
Subject: RE: Down-tools week project?

Heya,

I will undoubtedly have many emails regarding this, but, as a first off:

Does it really need to support things via an OPML file? I was just thinking that if we need to store extra data about a specific feed, maybe just a form backing on to a Db table would suffice? Though I’ve been advised against it in the past, an MVC project could set this form up quite quickly I think – and also add edit and delete functionality with little effort (compared to writing it all mself).

I was thinking a table with the structure:
ID, RSS feed URL, Search strings (not really sure what you mean by this?), text color, background color, search interval, description length

I don’t know what would be acceptable as a first version, but I would probably lose the custom update intervals and search strings (depending on what these are meant to be used for).

The advantage of MVC is that it is very good for creating views and keeping the pages up to date with the database schema. I just thought it would be easier than constantly reading from a file.
At this stage, it pays to use as little technology as possible, but I’m open to persuasion
Import and Export features probably wouldn’t be hard, but editing a file each time new items are added seems a little more awkward in my opinion. Especially if we are wanting to add custom attributes to it as well. 
I doubt whether we’d ever have more than forty entries.
As an alternative to the database, what were you think with regards to adding these extra features? Or, rather, how were you foreseeing the process of adding/changing the values in an OPML file?
At the moment I do it in PowerShell. It’s only XML, after all. I’m open to suggestions, of course, if it makes it simpler. 
So they were to act as a kind of regex? For example, ‘if the description does not contain at least one of these keywords, ignore it’?
Yes. Description, title, or one of the other attributes. RSS/ATOM is very vague standard
Also, with regards to the content on the front page: I’m not sure if you were thinking of a flowing grid, where containers moved down/across the page as they aged
Yes
of if there should be certain slots for certain types of content, which would get overridden. 
Nope
For example, one box is dedicated to the latest tweet by Phil Factor and nothing else can go in this slot, but this slot is always in the same location vs. a new tweet by Phil Factor overriding whatever content was in the ‘first’ box, and all other box contents being shuffled down, with the oldest content being knocked off of the page.
Cor. Sounds complicated.
Of course, all of my queries may be for naught. It’s hard to know how much is do-able in a week!
With DTWs, the trick is to ensure that you have something that looks drop-dead gorgeous for the minimum effort. 
My suggestion would be to start at the business end, where you’d get an XML list of stories and you’d do a simple XSLT  to produce a static page. (flowing stuff). I can put all the formatting parameters in the XML list of ‘stories’
I could get a PowerShell script working on the windows scheduler to do all this by end of play Monday,  if you could design the HTML  page and then get a good template going that could generate the page. 
Then, all we’d need is a web-based console to maintain the OPML list. We could use a database and MVC, or something cooler. 
The next problem is how to get the page into DBW….

How’s this
Day 1
You
Design page with spoof data. 
Me
Generate real data from OPML file as XML file

Then…
Me
Add bells and whistles to OPML file
You
Create first-cut XSLT template to process XML file



F

